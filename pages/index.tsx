import Head from 'next/head';
import { useViewerConnection, useViewerRecord } from '@self.id/react';
import { EthereumAuthProvider } from '@self.id/web';

import { useEffect, useState } from 'react';
declare global {
  interface Window {
    ethereum: any;
  }
}
export default function Home() {
  const [name, setName] = useState('');
  const [bio, setBio] = useState('');
  const [username, setUsername] = useState('');

  const [connection, connect, disconnect] = useViewerConnection();

  const [isWindow, setIsWindow] = useState(null);

  const record = useViewerRecord('basicProfile');

  async function createAuthProvider() {
    // The following assumes there is an injected `window.ethereum` provider
    const addresses = await window.ethereum.request({
      method: 'eth_requestAccounts'
    });
    return new EthereumAuthProvider(window.ethereum, addresses[0]);
  }

  async function connectAccount() {
    const authProvider = await createAuthProvider();
    connect(authProvider);
  }

  async function updateProfile() {
    if (!name || !bio || !username) {
      return;
    }
    await record.merge({
      name,
      bio,
      username
    });
  }

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setIsWindow(window);
    }
  }, [record]);

  return (
    <>
      <Head>
        <title>
          Decentralized Identity: Build a Profile with NextJs, Ethereum & Ceramic Network
        </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-gray-200">
        <div className="px-4 py-4 text-white bg-gray-600 shadow-lg sm:px-6 lg:px-8 lg:py-6">
          <div className="container px-6 mx-auto md:px-0">
            <h1 className="text-2xl font-bold text-center text-white">
              Decentralized Identity: Build a Profile with NextJs, Ethereum & Ceramic Network
            </h1>
          </div>
        </div>

        <div className="flex items-center justify-center pt-20 overflow-hidden font-sans">
          <div className="w-full max-w-md mx-auto">
            <div className="p-10 bg-white rounded-lg shadow-lg">
              <form>
                <div className="mb-6">
                  <label className="block mb-2 font-bold text-gray-700" htmlFor="name">
                    Name
                  </label>
                  <input
                    className="w-full p-2 border border-gray-300 rounded-lg"
                    type="text"
                    name="name"
                    id="name"
                    placeholder="Your name"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                  />
                </div>
                <div className="mb-6">
                  <label className="block mb-2 font-bold text-gray-700" htmlFor="bio">
                    Bio
                  </label>
                  <textarea
                    className="w-full p-2 border border-gray-300 rounded-lg"
                    name="bio"
                    id="bio"
                    rows="5"
                    placeholder="Write something about yourself"
                    onChange={(e) => {
                      setBio(e.target.value);
                    }}
                  ></textarea>
                </div>
                <div className="mb-6">
                  <label className="block mb-2 font-bold text-gray-700" htmlFor="username">
                    Username
                  </label>
                  <input
                    className="w-full p-2 border border-gray-300 rounded-lg"
                    type="text"
                    name="username"
                    id="username"
                    placeholder="Your username"
                    onChange={(e) => {
                      setUsername(e.target.value);
                    }}
                  />
                </div>
                <div className="flex items-center justify-between">
                  <button
                    className="px-4 py-2 font-bold text-white bg-blue-500 rounded hover:bg-blue-700"
                    type="submit"
                    disabled={!record.isMutable || record.isMutating}
                    onClick={() => updateProfile()}
                  >
                    {record.isMutating ? 'Updating...' : 'Update Profile'}
                  </button>

                  {connection.status === 'connected' ? (
                    <button
                      className="px-4 py-2 font-bold text-white bg-red-500 rounded hover:bg-red-700"
                      type="button"
                      onClick={() => disconnect()}
                    >
                      Disconnect
                    </button>
                  ) : isWindow && 'ethereum' in window ? (
                    <button
                      className="px-4 py-2 font-bold text-white bg-green-500 rounded hover:bg-green-700"
                      type="button"
                      disabled={connection.status === 'connecting'}
                      onClick={() => {
                        connectAccount();
                      }}
                    >
                      Connect Wallet
                    </button>
                  ) : (
                    <p className="w-full mt-2 text-sm italic text-center text-red-500">
                      An injected Ethereum provider such as{' '}
                      <a href="https://metamask.io/">MetaMask</a> is needed to authenticate.
                    </p>
                  )}
                </div>
              </form>
            </div>

            {connection.status === 'connected' && record && record.content ? (
              <div className="flex flex-col items-center mt-8">
                <h2 className="mb-6 text-3xl font-bold text-gray-900">Profile Information</h2>
                <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-lg">
                  <p className="mb-4">
                    <span className="mr-2 text-lg font-bold text-gray-700">Name:</span>{' '}
                    <span id="nameOutput" className="text-lg">
                      {record.content.name || 'No name set'}
                    </span>
                  </p>

                  <p className="mb-4">
                    <span className="mr-2 text-lg font-bold text-gray-700">Bio:</span>{' '}
                    <span id="bioOutput" className="text-lg">
                      {record.content.bio || 'No bio set'}
                    </span>
                  </p>
                  <p>
                    <span className="mr-2 text-lg font-bold text-gray-700">Username:</span>{' '}
                    <span id="usernameOutput" className="text-lg">
                      {record.content.username || 'No username set'}
                    </span>
                  </p>
                </div>
              </div>
            ) : (
              <div className="mt-8">
                <div className="p-8 bg-white rounded-lg shadow-lg">
                  <p>No profile found.</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
    </>
  );
}
